{"ast":null,"code":"/**\n * sse.js - A flexible EventSource polyfill/replacement.\n * https://github.com/mpetazzoni/sse.js\n *\n * Copyright (C) 2016-2024 Maxime Petazzoni <maxime.petazzoni@bulix.org>.\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @type SSE\n * @param {string} url\n * @param {SSEOptions} options\n * @return {SSE}\n */\nvar SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  /** @type {number} */\n  this.INITIALIZING = -1;\n  /** @type {number} */\n  this.CONNECTING = 0;\n  /** @type {number} */\n  this.OPEN = 1;\n  /** @type {number} */\n  this.CLOSED = 2;\n\n  /** @type {string} */\n  this.url = url;\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || this.payload && 'POST' || 'GET';\n  this.withCredentials = !!options.withCredentials;\n  this.debug = !!options.debug;\n\n  /** @type {string} */\n  this.FIELD_SEPARATOR = ':';\n\n  /** @type { {[key: string]: [EventListener]} } */\n  this.listeners = {};\n\n  /** @type {XMLHttpRequest} */\n  this.xhr = null;\n  /** @type {number} */\n  this.readyState = this.INITIALIZING;\n  /** @type {number} */\n  this.progress = 0;\n  /** @type {string} */\n  this.chunk = '';\n  /** @type {string} */\n  this.lastEventId = '';\n\n  /**\n   * @type AddEventListener\n   */\n  this.addEventListener = function (type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  /**\n   * @type RemoveEventListener\n   */\n  this.removeEventListener = function (type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n    const filtered = [];\n    this.listeners[type].forEach(function (element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  /**\n   * @type DispatchEvent\n   */\n  this.dispatchEvent = function (e) {\n    if (!e) {\n      return true;\n    }\n    if (this.debug) {\n      console.debug(e);\n    }\n    e.source = this;\n    const onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function (callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n    return true;\n  };\n\n  /** @private */\n  this._setReadyState = function (state) {\n    const event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n  this._onStreamFailure = function (e) {\n    const event = new CustomEvent('error');\n    event.data = e.currentTarget.response;\n    this.dispatchEvent(event);\n    this.close();\n  };\n  this._onStreamAbort = function () {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  };\n\n  /** @private */\n  this._onStreamProgress = function (e) {\n    if (!this.xhr) {\n      return;\n    }\n    if (this.xhr.status !== 200) {\n      this._onStreamFailure(e);\n      return;\n    }\n    if (this.readyState === this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n    const data = this.xhr.responseText.substring(this.progress);\n    this.progress += data.length;\n    const parts = (this.chunk + data).split(/(\\r\\n\\r\\n|\\r\\r|\\n\\n)/g);\n\n    /*\n     * We assume that the last chunk can be incomplete because of buffering or other network effects,\n     * so we always save the last part to merge it with the next incoming packet\n     */\n    const lastPart = parts.pop();\n    parts.forEach(function (part) {\n      if (part.trim().length > 0) {\n        this.dispatchEvent(this._parseEventChunk(part));\n      }\n    }.bind(this));\n    this.chunk = lastPart;\n  };\n\n  /** @private */\n  this._onStreamLoaded = function (e) {\n    this._onStreamProgress(e);\n\n    // Parse the last chunk.\n    this.dispatchEvent(this._parseEventChunk(this.chunk));\n    this.chunk = '';\n  };\n\n  /**\n   * Parse a received SSE event chunk into a constructed event object.\n   *\n   * Reference: https://html.spec.whatwg.org/multipage/server-sent-events.html#dispatchMessage\n   */\n  this._parseEventChunk = function (chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n    if (this.debug) {\n      console.debug(chunk);\n    }\n    const e = {\n      'id': null,\n      'retry': null,\n      'data': null,\n      'event': null\n    };\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(function (line) {\n      const index = line.indexOf(this.FIELD_SEPARATOR);\n      let field, value;\n      if (index > 0) {\n        // only first whitespace should be trimmed\n        const skip = line[index + 1] === ' ' ? 2 : 1;\n        field = line.substring(0, index);\n        value = line.substring(index + skip);\n      } else if (index < 0) {\n        // Interpret the entire line as the field name, and use the empty string as the field value\n        field = line;\n        value = '';\n      } else {\n        // A colon is the first character. This is a comment; ignore it.\n        return;\n      }\n      if (!(field in e)) {\n        return;\n      }\n\n      // consecutive 'data' is concatenated with newlines\n      if (field === 'data' && e[field] !== null) {\n        e['data'] += \"\\n\" + value;\n      } else {\n        e[field] = value;\n      }\n    }.bind(this));\n    if (e.id !== null) {\n      this.lastEventId = e.id;\n    }\n    const event = new CustomEvent(e.event || 'message');\n    event.id = e.id;\n    event.data = e.data || '';\n    event.lastEventId = this.lastEventId;\n    return event;\n  };\n  this._checkStreamClosed = function () {\n    if (!this.xhr) {\n      return;\n    }\n    if (this.xhr.readyState === XMLHttpRequest.DONE) {\n      this._setReadyState(this.CLOSED);\n    }\n  };\n\n  /**\n   * starts the streaming\n   * @type Stream\n   * @return {void}\n   */\n  this.stream = function () {\n    if (this.xhr) {\n      // Already connected.\n      return;\n    }\n    this._setReadyState(this.CONNECTING);\n    this.xhr = new XMLHttpRequest();\n    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));\n    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));\n    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));\n    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));\n    this.xhr.addEventListener('abort', this._onStreamAbort.bind(this));\n    this.xhr.open(this.method, this.url);\n    for (let header in this.headers) {\n      this.xhr.setRequestHeader(header, this.headers[header]);\n    }\n    if (this.lastEventId.length > 0) {\n      this.xhr.setRequestHeader(\"Last-Event-ID\", this.lastEventId);\n    }\n    this.xhr.withCredentials = this.withCredentials;\n    this.xhr.send(this.payload);\n  };\n\n  /**\n   * closes the stream\n   * @type Close\n   * @return {void}\n   */\n  this.close = function () {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n    this.xhr.abort();\n    this.xhr = null;\n    this._setReadyState(this.CLOSED);\n  };\n  if (options.start === undefined || options.start) {\n    this.stream();\n  }\n};\n\n// Export our SSE module for npm.js\nif (typeof exports !== 'undefined') {\n  exports.SSE = SSE;\n}\n\n// Export as an ECMAScript module\nexport { SSE };\n\n/**\n * @typedef { {[key: string]: string} } SSEHeaders\n */\n/**\n * @typedef {Object} SSEOptions\n * @property {SSEHeaders} [headers] - headers\n * @property {string} [payload] - payload as a string\n * @property {string} [method] - HTTP Method\n * @property {boolean} [withCredentials] - flag, if credentials needed\n * @property {boolean} [start] - flag, if streaming should start automatically\n * @property {boolean} [debug] - debugging flag\n */\n/**\n * @typedef {Object} _SSEvent\n * @property {string} id\n * @property {string} data\n */\n/**\n * @typedef {Object} _ReadyStateEvent\n * @property {number} readyState\n */\n/**\n * @typedef {Event & _SSEvent} SSEvent\n */\n/**\n * @typedef {SSEvent & _ReadyStateEvent} ReadyStateEvent\n */\n/**\n * @callback AddEventListener\n * @param {string} type\n * @param {function} listener\n * @returns {void}\n */\n/**\n * @callback RemoveEventListener\n * @param {string} type\n * @param {function} listener\n * @returns {void}\n */\n/**\n * @callback DispatchEvent\n * @param {string} type\n * @param {function} listener\n * @returns {boolean}\n */\n/**\n * @callback Stream\n * @returns {void}\n */\n/**\n * @callback Close\n * @returns {void}\n */\n/**\n * @callback OnMessage\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnOpen\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnLoad\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnReadystatechange\n * @param {ReadyStateEvent} event\n * @returns {void}\n */\n/**\n * @callback OnError\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnAbort\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @typedef {Object} SSE\n * @property {SSEHeaders} headers - headers\n * @property {string} payload - payload as a string\n * @property {string} method - HTTP Method\n * @property {boolean} withCredentials - flag, if credentials needed\n * @property {boolean} debug - debugging flag\n * @property {string} FIELD_SEPARATOR\n * @property {Record<string, Function[]>} listeners\n * @property {XMLHttpRequest | null} xhr\n * @property {number} readyState\n * @property {number} progress\n * @property {string} chunk\n * @property {-1} INITIALIZING\n * @property {0} CONNECTING\n * @property {1} OPEN\n * @property {2} CLOSED\n * @property {AddEventListener} addEventListener\n * @property {RemoveEventListener} removeEventListener\n * @property {DispatchEvent} dispatchEvent\n * @property {Stream} stream\n * @property {Close} close\n * @property {OnMessage} onmessage\n * @property {OnOpen} onopen\n * @property {OnLoad} onload\n * @property {OnReadystatechange} onreadystatechange\n * @property {OnError} onerror\n * @property {OnAbort} onabort\n */","map":{"version":3,"names":["SSE","url","options","INITIALIZING","CONNECTING","OPEN","CLOSED","headers","payload","undefined","method","withCredentials","debug","FIELD_SEPARATOR","listeners","xhr","readyState","progress","chunk","lastEventId","addEventListener","type","listener","indexOf","push","removeEventListener","filtered","forEach","element","length","dispatchEvent","e","console","source","onHandler","hasOwnProperty","call","defaultPrevented","every","callback","_setReadyState","state","event","CustomEvent","_onStreamFailure","data","currentTarget","response","close","_onStreamAbort","_onStreamProgress","status","responseText","substring","parts","split","lastPart","pop","part","trim","_parseEventChunk","bind","_onStreamLoaded","line","index","field","value","skip","id","_checkStreamClosed","XMLHttpRequest","DONE","stream","open","header","setRequestHeader","send","abort","start","exports"],"sources":["D:/DKHP_demo/dkhp_frontend/node_modules/sse.js/lib/sse.js"],"sourcesContent":["/**\n * sse.js - A flexible EventSource polyfill/replacement.\n * https://github.com/mpetazzoni/sse.js\n *\n * Copyright (C) 2016-2024 Maxime Petazzoni <maxime.petazzoni@bulix.org>.\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @type SSE\n * @param {string} url\n * @param {SSEOptions} options\n * @return {SSE}\n */\nvar SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  /** @type {number} */\n  this.INITIALIZING = -1;\n  /** @type {number} */\n  this.CONNECTING = 0;\n  /** @type {number} */\n  this.OPEN = 1;\n  /** @type {number} */\n  this.CLOSED = 2;\n\n  /** @type {string} */\n  this.url = url;\n\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || (this.payload && 'POST' || 'GET');\n  this.withCredentials = !!options.withCredentials;\n  this.debug = !!options.debug;\n\n  /** @type {string} */\n  this.FIELD_SEPARATOR = ':';\n\n  /** @type { {[key: string]: [EventListener]} } */\n  this.listeners = {};\n\n  /** @type {XMLHttpRequest} */\n  this.xhr = null;\n  /** @type {number} */\n  this.readyState = this.INITIALIZING;\n  /** @type {number} */\n  this.progress = 0;\n  /** @type {string} */\n  this.chunk = '';\n  /** @type {string} */\n  this.lastEventId = '';\n\n  /**\n   * @type AddEventListener\n   */\n  this.addEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  /**\n   * @type RemoveEventListener\n   */\n  this.removeEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n\n    const filtered = [];\n    this.listeners[type].forEach(function(element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  /**\n   * @type DispatchEvent\n   */\n  this.dispatchEvent = function(e) {\n    if (!e) {\n      return true;\n    }\n\n    if (this.debug) {\n      console.debug(e);\n    }\n\n    e.source = this;\n\n    const onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function(callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n\n    return true;\n  };\n\n  /** @private */\n  this._setReadyState = function(state) {\n    const event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n\n  this._onStreamFailure = function(e) {\n    const event = new CustomEvent('error');\n    event.data = e.currentTarget.response;\n    this.dispatchEvent(event);\n    this.close();\n  }\n\n  this._onStreamAbort = function() {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  }\n\n  /** @private */\n  this._onStreamProgress = function(e) {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.status !== 200) {\n      this._onStreamFailure(e);\n      return;\n    }\n\n    if (this.readyState === this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n\n    const data = this.xhr.responseText.substring(this.progress);\n\n    this.progress += data.length;\n    const parts = (this.chunk + data).split(/(\\r\\n\\r\\n|\\r\\r|\\n\\n)/g);\n\n    /*\n     * We assume that the last chunk can be incomplete because of buffering or other network effects,\n     * so we always save the last part to merge it with the next incoming packet\n     */\n    const lastPart = parts.pop();\n    parts.forEach(function(part) {\n        if (part.trim().length > 0) {\n            this.dispatchEvent(this._parseEventChunk(part));\n        }\n    }.bind(this));\n    this.chunk = lastPart;\n  };\n\n  /** @private */\n  this._onStreamLoaded = function(e) {\n    this._onStreamProgress(e);\n\n    // Parse the last chunk.\n    this.dispatchEvent(this._parseEventChunk(this.chunk));\n    this.chunk = '';\n  };\n\n  /**\n   * Parse a received SSE event chunk into a constructed event object.\n   *\n   * Reference: https://html.spec.whatwg.org/multipage/server-sent-events.html#dispatchMessage\n   */\n  this._parseEventChunk = function(chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n\n    if (this.debug) {\n      console.debug(chunk);\n    }\n\n    const e = {'id': null, 'retry': null, 'data': null, 'event': null};\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(function(line) {\n      const index = line.indexOf(this.FIELD_SEPARATOR);\n      let field, value;\n      if (index > 0) {\n        // only first whitespace should be trimmed\n        const skip = (line[index + 1] === ' ') ? 2 : 1;\n        field = line.substring(0, index);\n        value = line.substring(index + skip);\n      } else if (index < 0) {\n        // Interpret the entire line as the field name, and use the empty string as the field value\n        field = line;\n        value = '';\n      } else {\n        // A colon is the first character. This is a comment; ignore it.\n        return;\n      }\n\n      if (!(field in e)) {\n        return;\n      }\n\n      // consecutive 'data' is concatenated with newlines\n      if (field === 'data' && e[field] !== null) {\n          e['data'] += \"\\n\" + value;\n      } else {\n        e[field] = value;\n      }\n    }.bind(this));\n\n    if (e.id !== null) {\n      this.lastEventId = e.id;\n    }\n\n    const event = new CustomEvent(e.event || 'message');\n    event.id = e.id;\n    event.data = e.data || '';\n    event.lastEventId = this.lastEventId;\n    return event;\n  };\n\n  this._checkStreamClosed = function() {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.readyState === XMLHttpRequest.DONE) {\n      this._setReadyState(this.CLOSED);\n    }\n  };\n\n  /**\n   * starts the streaming\n   * @type Stream\n   * @return {void}\n   */\n  this.stream = function() {\n    if (this.xhr) {\n      // Already connected.\n      return;\n    }\n\n    this._setReadyState(this.CONNECTING);\n\n    this.xhr = new XMLHttpRequest();\n    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));\n    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));\n    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));\n    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));\n    this.xhr.addEventListener('abort', this._onStreamAbort.bind(this));\n    this.xhr.open(this.method, this.url);\n    for (let header in this.headers) {\n      this.xhr.setRequestHeader(header, this.headers[header]);\n    }\n    if (this.lastEventId.length > 0) {\n      this.xhr.setRequestHeader(\"Last-Event-ID\", this.lastEventId);\n    }\n    this.xhr.withCredentials = this.withCredentials;\n    this.xhr.send(this.payload);\n  };\n\n  /**\n   * closes the stream\n   * @type Close\n   * @return {void}\n   */\n  this.close = function() {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this.xhr.abort();\n    this.xhr = null;\n    this._setReadyState(this.CLOSED);\n  };\n\n  if (options.start === undefined || options.start) {\n    this.stream();\n  }\n};\n\n// Export our SSE module for npm.js\nif (typeof exports !== 'undefined') {\n  exports.SSE = SSE;\n}\n\n// Export as an ECMAScript module\nexport { SSE };\n\n/**\n * @typedef { {[key: string]: string} } SSEHeaders\n */\n/**\n * @typedef {Object} SSEOptions\n * @property {SSEHeaders} [headers] - headers\n * @property {string} [payload] - payload as a string\n * @property {string} [method] - HTTP Method\n * @property {boolean} [withCredentials] - flag, if credentials needed\n * @property {boolean} [start] - flag, if streaming should start automatically\n * @property {boolean} [debug] - debugging flag\n */\n/**\n * @typedef {Object} _SSEvent\n * @property {string} id\n * @property {string} data\n */\n/**\n * @typedef {Object} _ReadyStateEvent\n * @property {number} readyState\n */\n/**\n * @typedef {Event & _SSEvent} SSEvent\n */\n/**\n * @typedef {SSEvent & _ReadyStateEvent} ReadyStateEvent\n */\n/**\n * @callback AddEventListener\n * @param {string} type\n * @param {function} listener\n * @returns {void}\n */\n/**\n * @callback RemoveEventListener\n * @param {string} type\n * @param {function} listener\n * @returns {void}\n */\n/**\n * @callback DispatchEvent\n * @param {string} type\n * @param {function} listener\n * @returns {boolean}\n */\n/**\n * @callback Stream\n * @returns {void}\n */\n/**\n * @callback Close\n * @returns {void}\n */\n/**\n * @callback OnMessage\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnOpen\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnLoad\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnReadystatechange\n * @param {ReadyStateEvent} event\n * @returns {void}\n */\n/**\n * @callback OnError\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @callback OnAbort\n * @param {SSEvent} event\n * @returns {void}\n */\n/**\n * @typedef {Object} SSE\n * @property {SSEHeaders} headers - headers\n * @property {string} payload - payload as a string\n * @property {string} method - HTTP Method\n * @property {boolean} withCredentials - flag, if credentials needed\n * @property {boolean} debug - debugging flag\n * @property {string} FIELD_SEPARATOR\n * @property {Record<string, Function[]>} listeners\n * @property {XMLHttpRequest | null} xhr\n * @property {number} readyState\n * @property {number} progress\n * @property {string} chunk\n * @property {-1} INITIALIZING\n * @property {0} CONNECTING\n * @property {1} OPEN\n * @property {2} CLOSED\n * @property {AddEventListener} addEventListener\n * @property {RemoveEventListener} removeEventListener\n * @property {DispatchEvent} dispatchEvent\n * @property {Stream} stream\n * @property {Close} close\n * @property {OnMessage} onmessage\n * @property {OnOpen} onopen\n * @property {OnLoad} onload\n * @property {OnReadystatechange} onreadystatechange\n * @property {OnError} onerror\n * @property {OnAbort} onabort\n */\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}